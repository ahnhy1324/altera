|smul
clk => clk.IN2
reset => reset.IN2
start => start.IN1
word1[0] => word1[0].IN1
word1[1] => word1[1].IN1
word1[2] => word1[2].IN1
word1[3] => word1[3].IN1
word2[0] => word2[0].IN1
word2[1] => word2[1].IN1
word2[2] => word2[2].IN1
word2[3] => word2[3].IN1
product[0] <= datapaths:u1.port8
product[1] <= datapaths:u1.port8
product[2] <= datapaths:u1.port8
product[3] <= datapaths:u1.port8
product[4] <= datapaths:u1.port8
product[5] <= datapaths:u1.port8
product[6] <= datapaths:u1.port8
product[7] <= datapaths:u1.port8
ready <= controller:u2.port8


|smul|datapaths:u1
clk => product[0]~reg0.CLK
clk => product[1]~reg0.CLK
clk => product[2]~reg0.CLK
clk => product[3]~reg0.CLK
clk => product[4]~reg0.CLK
clk => product[5]~reg0.CLK
clk => product[6]~reg0.CLK
clk => product[7]~reg0.CLK
clk => multiplicand[0].CLK
clk => multiplicand[1].CLK
clk => multiplicand[2].CLK
clk => multiplicand[3].CLK
reset => product[0]~reg0.ACLR
reset => product[1]~reg0.ACLR
reset => product[2]~reg0.ACLR
reset => product[3]~reg0.ACLR
reset => product[4]~reg0.ACLR
reset => product[5]~reg0.ACLR
reset => product[6]~reg0.ACLR
reset => product[7]~reg0.ACLR
reset => multiplicand[0].ACLR
reset => multiplicand[1].ACLR
reset => multiplicand[2].ACLR
reset => multiplicand[3].ACLR
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => product.OUTPUTSELECT
load => multiplicand[3].ENA
load => multiplicand[2].ENA
load => multiplicand[1].ENA
load => multiplicand[0].ENA
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
shift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
addshift => product.OUTPUTSELECT
sub => sum[4].OUTPUTSELECT
sub => sum[3].OUTPUTSELECT
sub => sum[2].OUTPUTSELECT
sub => sum[1].OUTPUTSELECT
sub => sum[0].OUTPUTSELECT
word1[0] => multiplicand[0].DATAIN
word1[1] => multiplicand[1].DATAIN
word1[2] => multiplicand[2].DATAIN
word1[3] => multiplicand[3].DATAIN
word2[0] => product.DATAB
word2[1] => product.DATAB
word2[2] => product.DATAB
word2[3] => product.DATAB
product[0] <= product[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[1] <= product[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[2] <= product[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[3] <= product[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[4] <= product[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[5] <= product[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[6] <= product[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
product[7] <= product[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
m0 <= product[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|smul|controller:u2
clk => count[0].CLK
clk => count[1].CLK
clk => state.CLK
reset => count[0].ACLR
reset => count[1].ACLR
reset => state.ACLR
reset => ready.IN1
start => state.OUTPUTSELECT
start => count.OUTPUTSELECT
start => count.OUTPUTSELECT
start => load.IN1
m0 => addshift.IN1
m0 => shift.IN1
load <= load.DB_MAX_OUTPUT_PORT_TYPE
shift <= shift.DB_MAX_OUTPUT_PORT_TYPE
addshift <= addshift.DB_MAX_OUTPUT_PORT_TYPE
sub <= sub.DB_MAX_OUTPUT_PORT_TYPE
ready <= ready.DB_MAX_OUTPUT_PORT_TYPE


